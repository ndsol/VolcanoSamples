// Copyright (c) 2017-2018 the Volcano Authors. Licensed under the GPLv3.
#version 450

#define NUM_PIXELS (16)
// The first bit is used on the CPU only.
#define UASTC_SRC_FLAG_HAS_ALPHA (2)
#define UASTC_SRC_FLAG_HAS_COLOR (4)
struct UastcSource {
  uint pixel[NUM_PIXELS];
  uint flags;
};

struct etc2block {
  uint luma[NUM_PIXELS];
};

layout(binding = 0) buffer WorkIn {
  UastcSource src[];
};

layout(binding = 1) buffer WorkOut {
  etc2block dst[];
};

// local_size_x (and _y and _z) are best explained by
// https://www.khronos.org/opengl/wiki/Compute_Shader:
//
// ----- begin quote -----
// The individual invocations within a work group will be executed "in
// parallel". The main purpose of the distinction between work group count and
// local size is that the different compute shader invocations *within* a work
// group can communicate through a set of `shared` variables and special
// functions. Invocations in different work groups (within the same compute
// shader dispatch) cannot effectively communicate. Not without potentially
// deadlocking the system.
// ----- end quote -----
//
// The local_size_x here is *multiplied* by the ComputeBlock::work.x size to
// determine the total number of times this shader runs. Then a second shader
// with, e.g. a different local_size_x, could use the same uniform and Work
// buffers, but have more or less total shader runs.
//
// The Vulkan Spec, section 38.1 "Limit Requirements" defines the minimum
// required by Vulkan:
// maxComputeSharedMemorySize     must be at least: 16384
// - variables declared in GLSL as 'shared'
// maxComputeWorkGroupCount       must be at least: (65535,65535,65535)
// - for ComputeBlock::work.x, .y, .z
// maxComputeWorkGroupInvocations must be at least: 128
// - multiply local_size_x * local_size_y * local_size_z, must be below 128
//   to be compatible with any Vulkan device. Searching vulkan.gpuinfo.org:
//   128: ARM Mali-T830
//   256: AMD Radeon up to R9 200 series or R9 M200X
//        ARM Mali-T760, Mali T-860, Mali-T880
//   512 to 896: Some Intel GPUs
//               Adreno 505, 506, 508, 509, 510, 512, 530, 540
//               Mali-G77
//               PowerVR Rogue G6110, G6430, GE8100, GE8300, GE8320, GE8322,
//                   GM9446, GX6250
//  1024: Most common GPUs show up
//
// But setting local_size_x to 1024 may actually cause your compute shader to
// be *slower*! This may be for a number of reasons, but the most common is
// that 1024 invocations at once chokes on GPU register usage, leading to
// "register spills," (if 'shared' variables are used, those may also be
// "spilled" to off-die RAM). Most normal code has invocations that use more
// registers or on-die RAM than the GPU can run if invocations are maxed out.
//
// In short, a small local_work_x like 128 isn't too bad. After that, there are
// no guarantees, especially not cross-platform. Measure, measure, measure.
layout (local_size_x = 128) in;

layout (binding = 2) uniform UBO 
{
  // https://khronos.org/registry/DataFormat/specs/1.1/dataformat.1.1.html#ETC1
  // Table 61 and Table 64 contain the same values.
  uvec4 intensity_modifier;
  uint workCount;
} ubo;

ivec4 get_intensity_modifier(int i) {
  // ubo.intensity_modifier packs two rows into one element
  uvec4 mod = ubo.intensity_modifier;
  for (int j = (i >> 1) & 3; j > 0; j--) {
    mod = mod.yzwx;  // This is equivalent to mod[(i >> 1) & 3]
  }
  // Get two 8-bit values from the 32 bit value in ubo.intensity_modifier[]
  // e.g. if i == 0, raw = 0x208 means an array of [ 2, 8 ]
  uint raw = mod.x >> ((i & 1) << 4);  // May have bits higher than 0-7 set

  // Do "& 255" here to get only bits 0-7 of each of the two values:
  ivec2 r = ivec2(raw >> 8, raw) & 255;

  // Finally, the negative values can be derived from the positive values.
  return ivec4(-r.y, -r.x, r.x, r.y);
}

void main() {
  #define idx (gl_GlobalInvocationID.x)

  // Be careful in case the implementation gives an out of bounds idx
  /*if (idx > ubo.workCount) {
    return;
  }

  ivec4 inten = get_intensity_modifier(0);
  blocks[idx].luma[0] = inten.x;
  blocks[idx].luma[1] = inten.y;
  blocks[idx].luma[2] = inten.z;
  blocks[idx].luma[3] = inten.w;
  */
#if 0
  // A really long loop to slow things down
  uint s = 0;
  for (uint j = 0; j < 1000; j++) {
    for (uint k = 0; k < 200; k++) {
      if (s > 1) {
        s = 0;
      }
      s += dst[idx].luma[s] * k;
    }
  }
#endif
  for (uint i = 0; i < NUM_PIXELS; i++) {
    dst[idx].luma[i] = gl_LocalInvocationID.x + idx*128 + 1;
  }
  ivec4 r = get_intensity_modifier(int(gl_LocalInvocationID.x));
  dst[idx].luma[0] = r.x;
  dst[idx].luma[1] = r.y;
  dst[idx].luma[2] = r.z;
  dst[idx].luma[3] = r.w;
}
